#23.	Формируется матрица F следующим образом: если в Е сумма чисел, больших К в нечетных столбцах в области 3 больше, чем произведение чисел в области 2, то поменять в Е симметрично области 1 и 2 местами, 
#иначе С и В поменять местами. При этом матрица А не меняется. 
#После чего вычисляется выражение: ((К*A)*F+ K* F T . Выводятся по мере формирования А, F и все матричные операции последовательно.
#           1
# E B    4    2
# C D       3  
import random
def print_matrix(mat):
    for row in mat:
        for elem in row:
            print('{:4}'.format(elem), end=' ')
        print()

def pastemat(matF, matrix, column_index, row_index):
    a = column_index
    for row in matrix:
        for element in row:
            matF[row_index][column_index] = element
            column_index += 1
        row_index += 1
        column_index = a

def matzero(size):
    return [[0 for _ in range(size)] for _ in range(size)]

def matrix_input(mat, i1, i2, j1, j2):
    zero_mat = matzero(len(mat) // 2)
    for i in range(i1, i2):
        for j in range(j1, j2):
            zero_mat[i - i1][j - j1] = mat[i][j]
    return zero_mat
try:
    K = int(input('Введите число K: '))
    n = int(input('Введите число N, больше или равное 5: '))
    while n < 5:
        n = int(input('Введите число N, большее или равное 5: '))
except ValueError:
    print('Введенный символ не является числом.')
    exit(0)

ans = input('использования случайно сгенерированной матрицы напишите 1, для единичиной матрицы введите 2')
if ans not in ['1', '2']:
    print('Попробуйте ещё')
    while ans not in ['1','2']:
        ans = input('для использования случайно сгенерированной матрицы напишите 1, для единичной матрицы введите 2 ')

if ans == '1':
    matA = [[random.randint(-10, 10) for _ in range(n)] for _ in range(n)]
if ans == '2':
    matA = [[random.randint(1, 1) for _ in range(n)] for _ in range(n)]

print('Матрица А изначальная:')
print_matrix(matA)

half_n = n // 2
fix_n = half_n
if n % 2 != 0:
    fix_n += 1

matB = matrix_input(matA, 0, half_n, fix_n, n)
matC = matrix_input(matA, fix_n, n, fix_n, n)
matD = matrix_input(matA, fix_n, n, 0, half_n)
matE = matrix_input(matA, 0, half_n, 0, half_n)

print('Подматрицы матрицы A:')
print('Подматрица B')
print_matrix(matB)
print('Подматрица С')
print_matrix(matC)
print('Подматрица D')
print_matrix(matD)
print('Подматрица E')
print_matrix(matE)

odd_col_sum = 0
for i in range(n // 4, half_n):
    for j in range(half_n - i - 1, i + 1):
        if j % 2 != 0 and matE[i][j] > K:
            odd_col_sum += matE[i][j]
comp = 1
for i in range(half_n):
    for j in range(n//4,half_n):
        if i==j and j>=(half_n-1)//2: #числа на главной диагонали
            comp *= matE[i][j]
        elif i+j==half_n-1 and j>=(half_n-1)//2: #числа на побочной диагонали
            comp *= matE[i][j]
    if i!=half_n-1 and i!=0: #числа на третьей стороне треугольника - крайний правый столбец, в котором верхнее и нижнее число не берутся, так как они уже учтены в диагоналях
        print(i,matE[i][half_n-1])
        comp*=matE[i][half_n-1]
print('Сумма чисел, больших K, в нечетных столбцах области 3:', odd_col_sum)
print('Произведение чисел по периметру в области 2:', comp)

if odd_col_sum > comp:
    print('Сумма чисел, больших K, в нечетных столбцах области 3 оказалась больше, чем произведение чисел по периметру области 2')
    print('Начальная подматрица E:')
    print_matrix(matE)
    for i in range(n // 4, half_n):
        for j in range(half_n - i - 1, half_n):
            matE[i][j], matE[half_n - 1 - j][half_n - 1 - i] = matE[half_n - 1 - j][half_n - 1 - i], matE[i][j]

    print('Получившаяся подматрица E:')
    print_matrix(matE)
else:
    print('Сумма чисел, больших K, в нечетных столбцах области 3 оказалась меньше, чем произведение чисел по периметру области 2')
    matC, matB = matB, matC

matF = matA.copy()
pastemat(matF, matE, 0, 0)
pastemat(matF, matB, fix_n, 0)
pastemat(matF, matC, fix_n, fix_n)
pastemat(matF, matD, 0, fix_n)

print('Матрица F:')
print_matrix(matF)

matFt = matzero(n)

matFt = [[matF[j][i] for j in range(n)] for i in range(n)]
print('Транспонированная матрица F:')
print_matrix(matFt)

# Вычисление первого слагаемого (K * A) * F
first_term = matzero(n)
for i in range(n):
    for j in range(n):
        first_term[i][j] = K * matA[i][j]

matAF = matzero(n)
for i in range(n):
    for j in range(n):
        matAF[i][j] += first_term[i][j] * matF[i][j]

# Вычисление второго слагаемого K * F^T
second_term = [[K * elem for elem in row] for row in matFt]

# Суммирование первого и второго слагаемого
result = matzero(n)
for i in range(n):
    for j in range(n):
        result[i][j] = matAF[i][j] + second_term[i][j]

print('Первое слагаемое (K * A) * F:')
print_matrix(matAF)
print('Второе слагаемое K * F^T:')
print_matrix(second_term)

print('Результат сложения двух слагаемых:')
print_matrix(result)
