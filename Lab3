import random


def print_matrix(mat):
    for row in mat:
        for elem in row:
            print('{:4}'.format(elem), end=' ')
        print()


def pastemat(matF, matrix, column_index, row_index):
    a = column_index
    for row in matrix:
        for element in row:
            matF[row_index][column_index] = element
            column_index += 1
        row_index += 1
        column_index = a


def matzero(size):
    return [[0 for _ in range(size)] for _ in range(size)]


def matrix_input(mat, i1, i2, j1, j2):
    zero_mat = matzero(len(mat) // 2)
    for i in range(i1, i2):
        for j in range(j1, j2):
            zero_mat[i - i1][j - j1] = mat[i][j]
    return zero_mat


try:
    K = int(input('Введите число K: '))
    n = int(input('Введите число N, больше или равное 5: '))
    while n < 5:
        n = int(input('Введите число N, большее или равное 5: '))
except ValueError:
    print('Введенный символ не является числом.')
    exit(0)

ans = input('Для использования единичной матрицы напишите 1, для использования случайно сгенерированной напишите 2: ')
if ans not in ['1', '2']:
    print('Попробуйте ещё')
    while ans not in ['1', '2']:
        ans = input('Для использования единичной матрицы напишите 1, для использования случайно сгенерированной напишите 2: ')

if ans == '1':
    matA = [[1 for _ in range(n)] for _ in range(n)]
elif ans == '2':
    matA = [[random.randint(-10, 10) for _ in range(n)] for _ in range(n)]

print('Матрица А изначальная:')
print_matrix(matA)

half_n = n // 2
fix_n = half_n
if n % 2 != 0:
    fix_n += 1

matB = matrix_input(matA, 0, half_n, fix_n, n)
matC = matrix_input(matA, fix_n, n, fix_n, n)
matD = matrix_input(matA, fix_n, n, 0, half_n)
matE = matrix_input(matA, 0, half_n, 0, half_n)

print('Подматрицы матрицы A:')
print('Подматрица B')
print_matrix(matB)
print('Подматрица С')
print_matrix(matC)
print('Подматрица D')
print_matrix(matD)
print('Подматрица E')
print_matrix(matE)

odd_col_sum = 0
for i in range(n // 4, half_n):
    for j in range(half_n - i - 1, i + 1):
        if j % 2 != 0:
            odd_col_sum += matE[i][j]

comp = 1
for i in range(n // 4, half_n):
    for j in range(half_n - i - 1, i + 1):
        comp *= matB[i][j]

print('Сумма чисел, больших K, в нечетных столбцах области 3:', odd_col_sum)
print('Произведение чисел по периметру области 2:', comp)

if odd_col_sum > comp:
    print('Сумма чисел, больших K, в нечетных столбцах области 3 оказалась больше, чем произведение чисел по периметру области 2')
    print('Начальная подматрица E:')
    print_matrix(matE)
    for i in range(n // 4, half_n):
        for j in range(half_n - i - 1, i + 1):
            matE[i][j], matE[j][i] = matE[j][i], matE[i][j]
    print('Получившаяся подматрица E:')
    print_matrix(matE)
else:
    print('Сумма чисел, больших K, в нечетных столбцах области 3 оказалась меньше, чем произведение чисел по периметру области 2')
    matC, matB = matB, matC

matF = matA.copy()
pastemat(matF, matE, 0, 0)
pastemat(matF, matB, fix_n, 0)
pastemat(matF, matC, fix_n, fix_n)
pastemat(matF, matD, 0, fix_n)

print('Матрица F:')
print_matrix(matF)

matFt = matzero(n)

print("Матрица F транспонированная:")
for i in range(n):
    for j in range(n):
        matFt[i][j] = matF[j][i]
print_matrix(matFt)

print('Вычисляем ((K * A) * F + K * F^T):')

matKA = matzero(n)
matKF = matzero(n)
for i in range(n):
    for j in range(n):
        matKA[i][j] = K * matA[i][j]
        matKF[i][j] = K * matF[i][j]

matres = matzero(n)
for i in range(n):
    for j in range(n):
        for k in range(n):
            matres[i][j] += matKA[i][k] * matF[k][j]
        matres[i][j] += K * matFt[i][j]

print('Результат ((K * A) * F + K * F^T):')
print_matrix(matres)
